# Reusable action to cache SVM artifacts if the source code and dependencies have not changed.
name: Cache SVM Artifacts
inputs:
  type:
    description: "Type of the artifacts, used in cache key and archive name"
    required: true
  node_version:
    description: "Node version used to generate the artifacts"
    required: true
outputs:
  cache-hit:
    description: "Whether the cache was hit"
    value: ${{ steps.svm-artifacts-cache.outputs.cache-hit }}
runs:
  using: "composite"
  steps:
    - name: Resolve Node version
      id: resolved-node
      uses: ./.github/actions/setup-node-if-needed
      with:
        node_version: ${{ inputs.node_version }}
    - name: Restore cached SVM artifacts
      id: svm-artifacts-cache
      uses: actions/cache@v4
      with:
        # The job that generates the artifacts is responsible for archiving them to the cache tarball. This avoids any
        # conflicts with other caching actions that might have cleaned some of cached contents.
        path: svm-${{ inputs.type }}.tar
        key: svm-${{ inputs.type }}-${{ runner.os }}-node-${{ steps.resolved-node.outputs.version }}-${{ hashFiles('Cargo.lock', 'programs/**/Cargo.toml', 'programs/**/Xargo.toml', 'programs/**/*.rs') }}
    - name: Unpack restored SVM artifacts
      if: steps.svm-artifacts-cache.outputs.cache-hit == 'true'
      shell: bash
      run: tar -xf svm-${{ inputs.type }}.tar
