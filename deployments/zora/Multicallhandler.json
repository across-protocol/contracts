{
  "address": "0x0F7Ae28dE1C8532170AD4ee566B5801485c13a0E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "internalType": "struct MulticallHandler.Call[]",
          "name": "calls",
          "type": "tuple[]"
        }
      ],
      "name": "CallReverted",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "callDataLength",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "offset",
          "type": "uint256"
        }
      ],
      "name": "CalldataTooShort",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "internalType": "struct MulticallHandler.Call[]",
          "name": "calls",
          "type": "tuple[]"
        }
      ],
      "name": "InvalidCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotSelf",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "callData",
          "type": "bytes"
        }
      ],
      "name": "ReplacementCallFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct MulticallHandler.Call[]",
          "name": "calls",
          "type": "tuple[]"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "fallbackRecipient",
          "type": "address"
        }
      ],
      "name": "CallsFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DrainedTokens",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "internalType": "struct MulticallHandler.Call[]",
          "name": "calls",
          "type": "tuple[]"
        }
      ],
      "name": "attemptCalls",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "destination",
          "type": "address"
        }
      ],
      "name": "drainLeftoverTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "message",
          "type": "bytes"
        }
      ],
      "name": "handleV3AcrossMessage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "callData",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "offset",
              "type": "uint256"
            }
          ],
          "internalType": "struct MulticallHandler.Replacement[]",
          "name": "replacement",
          "type": "tuple[]"
        }
      ],
      "name": "makeCallWithBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x49499567a8cbf3df227438ad4d7c4162051431666af4ed02e21b9f16dfbf5ca8",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x9A8f92a830A5cB89a3816e3D267CB7791c16b04D",
    "contractAddress": null,
    "transactionIndex": 9,
    "gasUsed": "884565",
    "logsBloom": "0x
    "blockHash": "0xf4fe20b8726b59fe539454af0a53396598c0b942daca479f0f31a4d182c83abb",
    "transactionHash": "0x49499567a8cbf3df227438ad4d7c4162051431666af4ed02e21b9f16dfbf5ca8",
    "logs": [],
    "blockNumber": 33202799,
    "cumulativeGasUsed": "1239712",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "c2ffc35e077bfc077abf274ee041d952",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct MulticallHandler.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"CallReverted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"callDataLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"}],\"name\":\"CalldataTooShort\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct MulticallHandler.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"InvalidCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotSelf\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"name\":\"ReplacementCallFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct MulticallHandler.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fallbackRecipient\",\"type\":\"address\"}],\"name\":\"CallsFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DrainedTokens\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct MulticallHandler.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"attemptCalls\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"drainLeftoverTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"handleV3AcrossMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"}],\"internalType\":\"struct MulticallHandler.Replacement[]\",\"name\":\"replacement\",\"type\":\"tuple[]\"}],\"name\":\"makeCallWithBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"This contract makes the calls blindly. The contract will send any remaining tokens The caller should ensure that the tokens recieved by the handler are completely consumed.\",\"kind\":\"dev\",\"methods\":{\"handleV3AcrossMessage(address,uint256,address,bytes)\":{\"details\":\"This will execute all calls encoded in the msg. The caller is responsible for making sure all tokens are drained from this contract by the end of the series of calls. If not, they can be stolen. A drainLeftoverTokens call can be included as a way to drain any remaining tokens from this contract.\",\"params\":{\"message\":\"abi encoded array of Call structs, containing a target, callData, and value for each call that the contract should make.\"}},\"makeCallWithBalance(address,bytes,uint256,(address,uint256)[])\":{\"details\":\"Modifies calldata in-place using OR operations. Target calldata positions must be zeroed out. Cannot handle negative balances, making it incompatible with DEXs requiring negative input amounts. For native balance (token = address(0)), the entire balance is used as call value.\",\"params\":{\"callData\":\"The calldata to execute, with zero values at replacement positions\",\"replacement\":\"Array of Replacement structs specifying token addresses and byte offsets for balance injection\",\"target\":\"The contract address to call\",\"value\":\"The native token value to send (ignored if native balance replacement is used)\"}}},\"title\":\"Across Multicall contract that allows a user to specify a series of calls that should be made by the handler via the message field in the deposit.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"handleV3AcrossMessage(address,uint256,address,bytes)\":{\"notice\":\"Main entrypoint for the handler called by the SpokePool contract.\"},\"makeCallWithBalance(address,bytes,uint256,(address,uint256)[])\":{\"notice\":\"Executes a call while replacing specified calldata offsets with current token/native balances.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/handlers/MulticallHandler.sol\":\"MulticallHandler\"},\"debug\":{\"revertStrings\":\"strip\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb264c03a3442eb37a68ad620cefd1182766b58bee6cec40343480392d6b14d69\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"contracts/handlers/MulticallHandler.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/SpokePoolMessageHandler.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\n/**\\n * @title Across Multicall contract that allows a user to specify a series of calls that should be made by the handler\\n * via the message field in the deposit.\\n * @dev This contract makes the calls blindly. The contract will send any remaining tokens The caller should ensure that the tokens recieved by the handler are completely consumed.\\n */\\ncontract MulticallHandler is AcrossMessageHandler, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n    using Address for address payable;\\n\\n    struct Call {\\n        address target;\\n        bytes callData;\\n        uint256 value;\\n    }\\n\\n    struct Replacement {\\n        address token;\\n        uint256 offset;\\n    }\\n\\n    struct Instructions {\\n        //  Calls that will be attempted.\\n        Call[] calls;\\n        // Where the tokens go if any part of the call fails.\\n        // Leftover tokens are sent here as well if the action succeeds.\\n        address fallbackRecipient;\\n    }\\n\\n    // Emitted when one of the calls fails. Note: all calls are reverted in this case.\\n    event CallsFailed(Call[] calls, address indexed fallbackRecipient);\\n\\n    // Emitted when there are leftover tokens that are sent to the fallbackRecipient.\\n    event DrainedTokens(address indexed recipient, address indexed token, uint256 indexed amount);\\n\\n    // Errors\\n    error CallReverted(uint256 index, Call[] calls);\\n    error NotSelf();\\n    error InvalidCall(uint256 index, Call[] calls);\\n    error ReplacementCallFailed(bytes callData);\\n    error CalldataTooShort(uint256 callDataLength, uint256 offset);\\n\\n    modifier onlySelf() {\\n        _requireSelf();\\n        _;\\n    }\\n\\n    /**\\n     * @notice Main entrypoint for the handler called by the SpokePool contract.\\n     * @dev This will execute all calls encoded in the msg. The caller is responsible for making sure all tokens are\\n     * drained from this contract by the end of the series of calls. If not, they can be stolen.\\n     * A drainLeftoverTokens call can be included as a way to drain any remaining tokens from this contract.\\n     * @param message abi encoded array of Call structs, containing a target, callData, and value for each call that\\n     * the contract should make.\\n     */\\n    function handleV3AcrossMessage(\\n        address token,\\n        uint256,\\n        address,\\n        bytes memory message\\n    ) external nonReentrant {\\n        Instructions memory instructions = abi.decode(message, (Instructions));\\n\\n        // If there is no fallback recipient, call and revert if the inner call fails.\\n        if (instructions.fallbackRecipient == address(0)) {\\n            this.attemptCalls(instructions.calls);\\n            return;\\n        }\\n\\n        // Otherwise, try the call and send to the fallback recipient if any tokens are leftover.\\n        (bool success, ) = address(this).call(abi.encodeCall(this.attemptCalls, (instructions.calls)));\\n        if (!success) emit CallsFailed(instructions.calls, instructions.fallbackRecipient);\\n\\n        // If there are leftover tokens, send them to the fallback recipient regardless of execution success.\\n        _drainRemainingTokens(token, payable(instructions.fallbackRecipient));\\n    }\\n\\n    function attemptCalls(Call[] memory calls) external onlySelf {\\n        uint256 length = calls.length;\\n        for (uint256 i = 0; i < length; ++i) {\\n            Call memory call = calls[i];\\n\\n            // If we are calling an EOA with calldata, assume target was incorrectly specified and revert.\\n            if (call.callData.length > 0 && call.target.code.length == 0) {\\n                revert InvalidCall(i, calls);\\n            }\\n\\n            (bool success, ) = call.target.call{ value: call.value }(call.callData);\\n            if (!success) revert CallReverted(i, calls);\\n        }\\n    }\\n\\n    function drainLeftoverTokens(address token, address payable destination) external onlySelf {\\n        _drainRemainingTokens(token, destination);\\n    }\\n\\n    function _drainRemainingTokens(address token, address payable destination) internal {\\n        if (token != address(0)) {\\n            // ERC20 token.\\n            uint256 amount = IERC20(token).balanceOf(address(this));\\n            if (amount > 0) {\\n                IERC20(token).safeTransfer(destination, amount);\\n                emit DrainedTokens(destination, token, amount);\\n            }\\n        } else {\\n            // Send native token\\n            uint256 amount = address(this).balance;\\n            if (amount > 0) {\\n                destination.sendValue(amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Executes a call while replacing specified calldata offsets with current token/native balances.\\n     * @dev Modifies calldata in-place using OR operations. Target calldata positions must be zeroed out.\\n     * Cannot handle negative balances, making it incompatible with DEXs requiring negative input amounts.\\n     * For native balance (token = address(0)), the entire balance is used as call value.\\n     * @param target The contract address to call\\n     * @param callData The calldata to execute, with zero values at replacement positions\\n     * @param value The native token value to send (ignored if native balance replacement is used)\\n     * @param replacement Array of Replacement structs specifying token addresses and byte offsets for balance injection\\n     */\\n    function makeCallWithBalance(\\n        address target,\\n        bytes memory callData,\\n        uint256 value,\\n        Replacement[] calldata replacement\\n    ) external onlySelf {\\n        for (uint256 i = 0; i < replacement.length; i++) {\\n            uint256 bal = 0;\\n            if (replacement[i].token != address(0)) {\\n                bal = IERC20(replacement[i].token).balanceOf(address(this));\\n            } else {\\n                bal = address(this).balance;\\n\\n                // If we're using the native balance, we assume that the caller wants to send the full value to the target.\\n                value = bal;\\n            }\\n\\n            // + 32 to skip the length of the calldata\\n            uint256 offset = replacement[i].offset + 32;\\n\\n            // 32 has already been added to the offset, and the replacement value is 32 bytes long, so\\n            // we don't need to add 32 here. We just directly compare the offset with the length of the calldata.\\n            if (offset > callData.length) revert CalldataTooShort(callData.length, offset);\\n\\n            assembly (\\\"memory-safe\\\") {\\n                // Get the pointer to the offset that the caller wants to overwrite.\\n                let ptr := add(callData, offset)\\n                // Get the current value at the offset.\\n                let current := mload(ptr)\\n                // Or the current value with the new value.\\n                // Reasoning:\\n                // - caller should 0-out any portion that they want overwritten.\\n                // - if the caller is representing the balance in a smaller integer, like a uint160 or uint128,\\n                //   the higher bits will be 0 and not overwrite any other data in the calldata assuming\\n                //   the balance is small enough to fit in the smaller integer.\\n                // - The catch: the smaller integer where they want to store the balance must end no\\n                //   earlier than the 32nd byte in their calldata. Otherwise, this would require a\\n                //   negative offset, which is not possible.\\n                let val := or(bal, current)\\n                // Store the new value at the offset.\\n                mstore(ptr, val)\\n            }\\n        }\\n\\n        (bool success, ) = target.call{ value: value }(callData);\\n        if (!success) revert ReplacementCallFailed(callData);\\n    }\\n\\n    function _requireSelf() internal view {\\n        // Must be called by this contract to ensure that this cannot be triggered without the explicit consent of the\\n        // depositor (for a valid relay).\\n        if (msg.sender != address(this)) revert NotSelf();\\n    }\\n\\n    // Used if the caller is trying to unwrap the native token to this contract.\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x92b9faf99e5ae5b838ec5f359e490a3b1ef2c88d58ff7593dadb28c8284c381e\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/SpokePoolMessageHandler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// This interface is expected to be implemented by any contract that expects to receive messages from the SpokePool.\\ninterface AcrossMessageHandler {\\n    function handleV3AcrossMessage(\\n        address tokenSent,\\n        uint256 amount,\\n        address relayer,\\n        bytes memory message\\n    ) external;\\n}\\n\",\"keccak256\":\"0xc522e2ee6d874df26cae297fc23fc6e8b5216fc8d1901299bb147a25a8c6c259\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001a5760015f55610eae908161001f8239f35b5f80fdfe60406080815260048036101561001e575b5050361561001c575f80fd5b005b5f3560e01c9081633a5be8cb1461059b578163a58d50d314610321578163c41e8295146100c0575063ef8738d3146100565780610010565b346100bc577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100bc5761008b61062d565b60243573ffffffffffffffffffffffffffffffffffffffff811681036100bc5761001c916100b7610e1c565b610c2e565b5f80fd5b9050346100bc5760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100bc576100f961062d565b6024929067ffffffffffffffff84358181116100bc5761011c9036908601610714565b916044606435928084116100bc57366023850112156100bc57838701359081116100bc57878401938836918360061b0101116100bc5761015a610e1c565b604435935f5b8281106101c657505050505f91829184519160208601915af16101816108a4565b501561018957005b6020936101c292519485947fb3beda730000000000000000000000000000000000000000000000000000000086528501528301906107b4565b0390fd5b73ffffffffffffffffffffffffffffffffffffffff806101ef6101ea848787610bd0565b610c0d565b1615610317576102036101ea838686610bd0565b16885180917f70a08231000000000000000000000000000000000000000000000000000000008252308c830152818d60209485935afa91821561030d575f926102df575b50505b602080610258848787610bd0565b01358181018082116102b4578a5180821161028157505089010180519091179052600101610160565b88918f8f928f51937f4d3ae48d000000000000000000000000000000000000000000000000000000008552840152820152fd5b8d60118e7f4e487b71000000000000000000000000000000000000000000000000000000005f52525ffd5b90809250813d8311610306575b6102f68183610699565b810103126100bc57515f80610247565b503d6102ec565b8a513d5f823e3d90fd5b504795508561024a565b9050346100bc57602091827ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100bc5767ffffffffffffffff9082358281116100bc57366023820112156100bc5780840135946024916103838761075a565b9461039085519687610699565b878652828601908460059960051b840101923684116100bc57858101925b8484106104fe5750505050506103c2610e1c565b8351955f5b8781106103d057005b85518110156104d3578281831b87010151838101908151511515806104b3575b610474575f91818873ffffffffffffffffffffffffffffffffffffffff859451169101519151918783519301915af16104276108a4565b5015610435576001016103c7565b866101c287878781519586957fe462c44000000000000000000000000000000000000000000000000000000000875286015284015260448301906107f7565b86517fe237730c000000000000000000000000000000000000000000000000000000008152808a01849052808701889052806101c2604482018b6107f7565b5073ffffffffffffffffffffffffffffffffffffffff8151163b156103f0565b836032887f4e487b71000000000000000000000000000000000000000000000000000000005f52525ffd5b83358381116100bc57820160607fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc82360301126100bc5788519161054183610650565b8882013573ffffffffffffffffffffffffffffffffffffffff811681036100bc5783526044820135928584116100bc57606489949361058686958d3691840101610714565b8584015201358b8201528152019301926103ae565b346100bc5760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100bc576105d261062d565b9060443573ffffffffffffffffffffffffffffffffffffffff8116036100bc576064359067ffffffffffffffff82116100bc5761061191369101610714565b60025f54146100bc576106279160025f556108d3565b60015f55005b6004359073ffffffffffffffffffffffffffffffffffffffff821682036100bc57565b6060810190811067ffffffffffffffff82111761066c57604052565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761066c57604052565b67ffffffffffffffff811161066c57601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b81601f820112156100bc5780359061072b826106da565b926107396040519485610699565b828452602083830101116100bc57815f926020809301838601378301015290565b67ffffffffffffffff811161066c5760051b60200190565b519073ffffffffffffffffffffffffffffffffffffffff821682036100bc57565b5f5b8381106107a45750505f910152565b8181015183820152602001610795565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f6020936107f081518092818752878088019101610793565b0116010190565b908082519081815260208091019281808460051b8301019501935f915b8483106108245750505050505090565b9091929394958480827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0856001950301865289519061088a606073ffffffffffffffffffffffffffffffffffffffff8451168352848401519080868501528301906107b4565b916040809101519101529801930193019194939290610814565b3d156108ce573d906108b5826106da565b916108c36040519384610699565b82523d5f602084013e565b606090565b81516020908301928184019382828203126100bc578282015167ffffffffffffffff928382116100bc57019060409182818303126100bc578251918383018381108682111761066c578452858201518581116100bc5782019088603f830112156100bc57868201516109448161075a565b9961095187519b8c610699565b818b5286898c019260051b850101938185116100bc57908188809695949301925b858410610b045750505050505061098c9188845201610772565b938082019385855273ffffffffffffffffffffffffffffffffffffffff80961615610a8f5750610a4796505f8083518551610a27816109fb878201947fa58d50d300000000000000000000000000000000000000000000000000000000865288602484015260448301906107f7565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08101835282610699565b519082305af1610a356108a4565b5015610a49575b505050511690610c2e565b565b7f5296f22c5d0413b66d0bf45c479c4e2ca5b278634bdbd028b48e49502105f966915190610a848686511694519282849384528301906107f7565b0390a25f8080610a3c565b94509250509250303b156100bc57610adc935f91845195869283927fa58d50d3000000000000000000000000000000000000000000000000000000008452600484015260248301906107f7565b038183305af18015610afa57610af157505050565b821161066c5752565b82513d5f823e3d90fd5b9091928094959650518a81116100bc5782019060607fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe083880301126100bc57895190610b4f82610650565b610b5a8b8401610772565b825260608301518c81116100bc5783019185605f840112156100bc57828c01518c94610b91610b88836106da565b96519687610699565b81865287606083870101116100bc578f95610bb6608093889760608985019101610793565b8584015201518c8201528152019301919088959493610972565b9190811015610be05760061b0190565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b3573ffffffffffffffffffffffffffffffffffffffff811681036100bc5790565b73ffffffffffffffffffffffffffffffffffffffff91908216908115610dec57604051927f70a082310000000000000000000000000000000000000000000000000000000084523060048501526020918285602481875afa948515610de1575f95610db2575b5084610ca2575b5050505050565b16906040518181017fa9059cbb000000000000000000000000000000000000000000000000000000008152836024830152856044830152604482526080820167ffffffffffffffff918382108383111761066c5760c084019283118284101761066c57610d4e93855f94938594604052527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656460a0820152519082885af1610d476108a4565b9085610e4f565b8051918215918215610d92575b50509050156100bc577f74d3741ef03417659087d2ec6af11dade8713f9b7f592569d60cf1ea0c9a44555f80a45f80808080610c9b565b8092508193810103126100bc57015180151581036100bc57805f80610d5b565b9094508281813d8311610dda575b610dca8183610699565b810103126100bc5751935f610c94565b503d610dc0565b6040513d5f823e3d90fd5b9147915081610dfa57505050565b8147106100bc575f92839283928392165af1610e146108a4565b50156100bc57565b303303610e2557565b60046040517f29c3b7ee000000000000000000000000000000000000000000000000000000008152fd5b9015610e6957815115610e60575090565b3b156100bc5790565b5080519081156100bc57602001fdfea2646970667358221220720c88433acf92a8189c82bb29ba38797191c7e6065c4eac1880ca9219c79e3364736f6c63430008170033",
  "deployedBytecode": "0x60406080815260048036101561001e575b5050361561001c575f80fd5b005b5f3560e01c9081633a5be8cb1461059b578163a58d50d314610321578163c41e8295146100c0575063ef8738d3146100565780610010565b346100bc577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100bc5761008b61062d565b60243573ffffffffffffffffffffffffffffffffffffffff811681036100bc5761001c916100b7610e1c565b610c2e565b5f80fd5b9050346100bc5760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100bc576100f961062d565b6024929067ffffffffffffffff84358181116100bc5761011c9036908601610714565b916044606435928084116100bc57366023850112156100bc57838701359081116100bc57878401938836918360061b0101116100bc5761015a610e1c565b604435935f5b8281106101c657505050505f91829184519160208601915af16101816108a4565b501561018957005b6020936101c292519485947fb3beda730000000000000000000000000000000000000000000000000000000086528501528301906107b4565b0390fd5b73ffffffffffffffffffffffffffffffffffffffff806101ef6101ea848787610bd0565b610c0d565b1615610317576102036101ea838686610bd0565b16885180917f70a08231000000000000000000000000000000000000000000000000000000008252308c830152818d60209485935afa91821561030d575f926102df575b50505b602080610258848787610bd0565b01358181018082116102b4578a5180821161028157505089010180519091179052600101610160565b88918f8f928f51937f4d3ae48d000000000000000000000000000000000000000000000000000000008552840152820152fd5b8d60118e7f4e487b71000000000000000000000000000000000000000000000000000000005f52525ffd5b90809250813d8311610306575b6102f68183610699565b810103126100bc57515f80610247565b503d6102ec565b8a513d5f823e3d90fd5b504795508561024a565b9050346100bc57602091827ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100bc5767ffffffffffffffff9082358281116100bc57366023820112156100bc5780840135946024916103838761075a565b9461039085519687610699565b878652828601908460059960051b840101923684116100bc57858101925b8484106104fe5750505050506103c2610e1c565b8351955f5b8781106103d057005b85518110156104d3578281831b87010151838101908151511515806104b3575b610474575f91818873ffffffffffffffffffffffffffffffffffffffff859451169101519151918783519301915af16104276108a4565b5015610435576001016103c7565b866101c287878781519586957fe462c44000000000000000000000000000000000000000000000000000000000875286015284015260448301906107f7565b86517fe237730c000000000000000000000000000000000000000000000000000000008152808a01849052808701889052806101c2604482018b6107f7565b5073ffffffffffffffffffffffffffffffffffffffff8151163b156103f0565b836032887f4e487b71000000000000000000000000000000000000000000000000000000005f52525ffd5b83358381116100bc57820160607fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc82360301126100bc5788519161054183610650565b8882013573ffffffffffffffffffffffffffffffffffffffff811681036100bc5783526044820135928584116100bc57606489949361058686958d3691840101610714565b8584015201358b8201528152019301926103ae565b346100bc5760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100bc576105d261062d565b9060443573ffffffffffffffffffffffffffffffffffffffff8116036100bc576064359067ffffffffffffffff82116100bc5761061191369101610714565b60025f54146100bc576106279160025f556108d3565b60015f55005b6004359073ffffffffffffffffffffffffffffffffffffffff821682036100bc57565b6060810190811067ffffffffffffffff82111761066c57604052565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761066c57604052565b67ffffffffffffffff811161066c57601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b81601f820112156100bc5780359061072b826106da565b926107396040519485610699565b828452602083830101116100bc57815f926020809301838601378301015290565b67ffffffffffffffff811161066c5760051b60200190565b519073ffffffffffffffffffffffffffffffffffffffff821682036100bc57565b5f5b8381106107a45750505f910152565b8181015183820152602001610795565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f6020936107f081518092818752878088019101610793565b0116010190565b908082519081815260208091019281808460051b8301019501935f915b8483106108245750505050505090565b9091929394958480827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0856001950301865289519061088a606073ffffffffffffffffffffffffffffffffffffffff8451168352848401519080868501528301906107b4565b916040809101519101529801930193019194939290610814565b3d156108ce573d906108b5826106da565b916108c36040519384610699565b82523d5f602084013e565b606090565b81516020908301928184019382828203126100bc578282015167ffffffffffffffff928382116100bc57019060409182818303126100bc578251918383018381108682111761066c578452858201518581116100bc5782019088603f830112156100bc57868201516109448161075a565b9961095187519b8c610699565b818b5286898c019260051b850101938185116100bc57908188809695949301925b858410610b045750505050505061098c9188845201610772565b938082019385855273ffffffffffffffffffffffffffffffffffffffff80961615610a8f5750610a4796505f8083518551610a27816109fb878201947fa58d50d300000000000000000000000000000000000000000000000000000000865288602484015260448301906107f7565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08101835282610699565b519082305af1610a356108a4565b5015610a49575b505050511690610c2e565b565b7f5296f22c5d0413b66d0bf45c479c4e2ca5b278634bdbd028b48e49502105f966915190610a848686511694519282849384528301906107f7565b0390a25f8080610a3c565b94509250509250303b156100bc57610adc935f91845195869283927fa58d50d3000000000000000000000000000000000000000000000000000000008452600484015260248301906107f7565b038183305af18015610afa57610af157505050565b821161066c5752565b82513d5f823e3d90fd5b9091928094959650518a81116100bc5782019060607fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe083880301126100bc57895190610b4f82610650565b610b5a8b8401610772565b825260608301518c81116100bc5783019185605f840112156100bc57828c01518c94610b91610b88836106da565b96519687610699565b81865287606083870101116100bc578f95610bb6608093889760608985019101610793565b8584015201518c8201528152019301919088959493610972565b9190811015610be05760061b0190565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b3573ffffffffffffffffffffffffffffffffffffffff811681036100bc5790565b73ffffffffffffffffffffffffffffffffffffffff91908216908115610dec57604051927f70a082310000000000000000000000000000000000000000000000000000000084523060048501526020918285602481875afa948515610de1575f95610db2575b5084610ca2575b5050505050565b16906040518181017fa9059cbb000000000000000000000000000000000000000000000000000000008152836024830152856044830152604482526080820167ffffffffffffffff918382108383111761066c5760c084019283118284101761066c57610d4e93855f94938594604052527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656460a0820152519082885af1610d476108a4565b9085610e4f565b8051918215918215610d92575b50509050156100bc577f74d3741ef03417659087d2ec6af11dade8713f9b7f592569d60cf1ea0c9a44555f80a45f80808080610c9b565b8092508193810103126100bc57015180151581036100bc57805f80610d5b565b9094508281813d8311610dda575b610dca8183610699565b810103126100bc5751935f610c94565b503d610dc0565b6040513d5f823e3d90fd5b9147915081610dfa57505050565b8147106100bc575f92839283928392165af1610e146108a4565b50156100bc57565b303303610e2557565b60046040517f29c3b7ee000000000000000000000000000000000000000000000000000000008152fd5b9015610e6957815115610e60575090565b3b156100bc5790565b5080519081156100bc57602001fdfea2646970667358221220720c88433acf92a8189c82bb29ba38797191c7e6065c4eac1880ca9219c79e3364736f6c63430008170033",
  "devdoc": {
    "details": "This contract makes the calls blindly. The contract will send any remaining tokens The caller should ensure that the tokens recieved by the handler are completely consumed.",
    "kind": "dev",
    "methods": {
      "handleV3AcrossMessage(address,uint256,address,bytes)": {
        "details": "This will execute all calls encoded in the msg. The caller is responsible for making sure all tokens are drained from this contract by the end of the series of calls. If not, they can be stolen. A drainLeftoverTokens call can be included as a way to drain any remaining tokens from this contract.",
        "params": {
          "message": "abi encoded array of Call structs, containing a target, callData, and value for each call that the contract should make."
        }
      },
      "makeCallWithBalance(address,bytes,uint256,(address,uint256)[])": {
        "details": "Modifies calldata in-place using OR operations. Target calldata positions must be zeroed out. Cannot handle negative balances, making it incompatible with DEXs requiring negative input amounts. For native balance (token = address(0)), the entire balance is used as call value.",
        "params": {
          "callData": "The calldata to execute, with zero values at replacement positions",
          "replacement": "Array of Replacement structs specifying token addresses and byte offsets for balance injection",
          "target": "The contract address to call",
          "value": "The native token value to send (ignored if native balance replacement is used)"
        }
      }
    },
    "title": "Across Multicall contract that allows a user to specify a series of calls that should be made by the handler via the message field in the deposit.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "handleV3AcrossMessage(address,uint256,address,bytes)": {
        "notice": "Main entrypoint for the handler called by the SpokePool contract."
      },
      "makeCallWithBalance(address,bytes,uint256,(address,uint256)[])": {
        "notice": "Executes a call while replacing specified calldata offsets with current token/native balances."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10,
        "contract": "contracts/handlers/MulticallHandler.sol:MulticallHandler",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
