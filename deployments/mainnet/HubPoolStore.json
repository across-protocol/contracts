{
  "address": "0x1Ace3BbD69b63063F859514Eca29C9BDd8310E61",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_hubPool",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "NotHubPool",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "name": "StoredCallData",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "hubPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "relayMessageCallData",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "bool",
          "name": "isAdminSender",
          "type": "bool"
        }
      ],
      "name": "storeRelayMessageCalldata",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1e284a72ee02b29a5d3ae750a7cdecd4f74ca606e1b775d5dbbcbebe7c493d73",
  "receipt": {
    "to": null,
    "from": "0x9A8f92a830A5cB89a3816e3D267CB7791c16b04D",
    "contractAddress": "0x1Ace3BbD69b63063F859514Eca29C9BDd8310E61",
    "transactionIndex": 25,
    "gasUsed": "374442",
    "logsBloom": "0x
    "blockHash": "0x6b7a920bbbb5df4872d26e37b35e453d79652b014d4194c732b6ddab16d996a3",
    "transactionHash": "0x1e284a72ee02b29a5d3ae750a7cdecd4f74ca606e1b775d5dbbcbebe7c493d73",
    "logs": [],
    "blockNumber": 22368469,
    "cumulativeGasUsed": "3553199",
    "status": 1,
    "byzantium": true
  },
  "args": ["0xc186fA914353c44b2E33eBE05f21846F1048bEda"],
  "numDeployments": 1,
  "solcInputHash": "d588ac0bd437ae8849ec6f9277b07547",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_hubPool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NotHubPool\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"StoredCallData\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"hubPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"relayMessageCallData\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"isAdminSender\",\"type\":\"bool\"}],\"name\":\"storeRelayMessageCalldata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"custom:security-contact\":\"bugs@across.to\",\"details\":\"Designed to be used with Universal_Adapter and Universal_SpokePool.This contract DOES NOT prevent replay attacks of storage proofs on the L2 spoke pool if the UniversalStorageProof_Adapters using this contract are mapped to spokepools with the same address on different L2 chains. See comment in storeRelayAdminFunctionCalldata() for more details.\",\"kind\":\"dev\",\"methods\":{\"storeRelayMessageCalldata(address,bytes,bool)\":{\"details\":\"Only callable by the HubPool contract.\",\"params\":{\"data\":\"Data to send to Universal SpokePool.\",\"isAdminSender\":\"True if the data is an admin function call, false otherwise.\",\"target\":\"Address of the contract on the destination that will receive the message. Unused if the data is NOT an admin function and can be relayed to any target.\"}}},\"version\":1},\"userdoc\":{\"events\":{\"StoredCallData(address,bytes,uint256)\":{\"notice\":\"Event designed to be queried off chain and relayed to Universal SpokePool.\"}},\"kind\":\"user\",\"methods\":{\"hubPool()\":{\"notice\":\"Address of the HubPool contract, the only contract that can store data to this contract.\"},\"relayMessageCallData(uint256)\":{\"notice\":\"Maps nonce to hash of calldata.\"},\"storeRelayMessageCalldata(address,bytes,bool)\":{\"notice\":\"To be called by HubPool to store calldata that will be relayed to the Universal_SpokePool via storage proofs.\"}},\"notice\":\"Stores data that can be relayed to L2 SpokePool using storage proof verification and light client contracts on the L2 where the SpokePool is deployed. Only the HubPool can store data to this contract. Each data to be relayed is written to a unique slot key and that slot key's value can never be modified.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/chain-adapters/utilities/HubPoolStore.sol\":\"HubPoolStore\"},\"debug\":{\"revertStrings\":\"strip\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"contracts/chain-adapters/utilities/HubPoolStore.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport { HubPoolInterface } from \\\"../../interfaces/HubPoolInterface.sol\\\";\\n\\ninterface IHubPool {\\n    function rootBundleProposal() external view returns (HubPoolInterface.RootBundle memory);\\n}\\n\\n/**\\n * @notice Stores data that can be relayed to L2 SpokePool using storage proof verification and light client contracts\\n * on the L2 where the SpokePool is deployed. Only the HubPool can store data to this contract. Each data to be\\n * relayed is written to a unique slot key and that slot key's value can never be modified.\\n * @dev Designed to be used with Universal_Adapter and Universal_SpokePool.\\n * @dev This contract DOES NOT prevent replay attacks of storage proofs on the L2 spoke pool if the\\n * UniversalStorageProof_Adapters using this contract are mapped to spokepools with the same address on different\\n * L2 chains. See comment in storeRelayAdminFunctionCalldata() for more details.\\n * @custom:security-contact bugs@across.to\\n */\\ncontract HubPoolStore {\\n    error NotHubPool();\\n\\n    /// @notice Maps nonce to hash of calldata.\\n    mapping(uint256 => bytes32) public relayMessageCallData;\\n\\n    /// @notice Counter to ensure that each relay admin function calldata is unique.\\n    uint256 private dataUuid;\\n\\n    /// @notice Address of the HubPool contract, the only contract that can store data to this contract.\\n    address public immutable hubPool;\\n\\n    /// @notice Event designed to be queried off chain and relayed to Universal SpokePool.\\n    event StoredCallData(address indexed target, bytes data, uint256 indexed nonce);\\n\\n    modifier onlyHubPool() {\\n        if (msg.sender != hubPool) {\\n            revert NotHubPool();\\n        }\\n        _;\\n    }\\n\\n    constructor(address _hubPool) {\\n        hubPool = _hubPool;\\n    }\\n\\n    /**\\n     * @notice To be called by HubPool to store calldata that will be relayed\\n     * to the Universal_SpokePool via storage proofs.\\n     * @dev Only callable by the HubPool contract.\\n     * @param target Address of the contract on the destination that will receive the message. Unused if the\\n     * data is NOT an admin function and can be relayed to any target.\\n     * @param data Data to send to Universal SpokePool.\\n     * @param isAdminSender True if the data is an admin function call, false otherwise.\\n     */\\n    function storeRelayMessageCalldata(\\n        address target,\\n        bytes calldata data,\\n        bool isAdminSender\\n    ) external onlyHubPool {\\n        if (isAdminSender) {\\n            _storeData(target, dataUuid++, data);\\n        } else {\\n            _storeRelayMessageCalldataForAnyTarget(data);\\n        }\\n    }\\n\\n    function _storeRelayMessageCalldataForAnyTarget(bytes calldata data) internal {\\n        // When the data can be sent to any target, we assume that the data contains a relayRootBundleCall as\\n        // constructed by an executeRootBundle() call, therefore this data will be identical for all spoke pools\\n        // in this bundle. We can use the current hub pool's challengePeriodEndTimestamp as the nonce for this data\\n        // so that all relayRootBundle calldata for this bundle gets stored to the same slot and we only write to\\n        // this slot once.\\n        _storeData(address(0), IHubPool(hubPool).rootBundleProposal().challengePeriodEndTimestamp, data);\\n    }\\n\\n    function _storeData(\\n        address target,\\n        uint256 nonce,\\n        bytes calldata data\\n    ) internal {\\n        if (relayMessageCallData[nonce] != bytes32(0)) {\\n            // Data is already stored, do nothing.\\n            return;\\n        }\\n        relayMessageCallData[nonce] = keccak256(abi.encode(target, data));\\n        emit StoredCallData(target, data, nonce);\\n    }\\n}\\n\",\"keccak256\":\"0x4069c9b161df882f990c735fa9076186dac7bf8fd3888ba427057c1631d659c3\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/HubPoolInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @notice Concise list of functions in HubPool implementation.\\n */\\ninterface HubPoolInterface {\\n    // This leaf is meant to be decoded in the HubPool to rebalance tokens between HubPool and SpokePool.\\n    struct PoolRebalanceLeaf {\\n        // This is used to know which chain to send cross-chain transactions to (and which SpokePool to send to).\\n        uint256 chainId;\\n        // Total LP fee amount per token in this bundle, encompassing all associated bundled relays.\\n        uint256[] bundleLpFees;\\n        // Represents the amount to push to or pull from the SpokePool. If +, the pool pays the SpokePool. If negative\\n        // the SpokePool pays the HubPool. There can be arbitrarily complex rebalancing rules defined offchain. This\\n        // number is only nonzero when the rules indicate that a rebalancing action should occur. When a rebalance does\\n        // occur, runningBalances must be set to zero for this token and netSendAmounts should be set to the previous\\n        // runningBalances + relays - deposits in this bundle. If non-zero then it must be set on the SpokePool's\\n        // RelayerRefundLeaf amountToReturn as -1 * this value to show if funds are being sent from or to the SpokePool.\\n        int256[] netSendAmounts;\\n        // This is only here to be emitted in an event to track a running unpaid balance between the L2 pool and the L1\\n        // pool. A positive number indicates that the HubPool owes the SpokePool funds. A negative number indicates that\\n        // the SpokePool owes the HubPool funds. See the comment above for the dynamics of this and netSendAmounts.\\n        int256[] runningBalances;\\n        // Used by data worker to mark which leaves should relay roots to SpokePools, and to otherwise organize leaves.\\n        // For example, each leaf should contain all the rebalance information for a single chain, but in the case where\\n        // the list of l1Tokens is very large such that they all can't fit into a single leaf that can be executed under\\n        // the block gas limit, then the data worker can use this groupIndex to organize them. Any leaves with\\n        // a groupIndex equal to 0 will relay roots to the SpokePool, so the data worker should ensure that only one\\n        // leaf for a specific chainId should have a groupIndex equal to 0.\\n        uint256 groupIndex;\\n        // Used as the index in the bitmap to track whether this leaf has been executed or not.\\n        uint8 leafId;\\n        // The bundleLpFees, netSendAmounts, and runningBalances are required to be the same length. They are parallel\\n        // arrays for the given chainId and should be ordered by the l1Tokens field. All whitelisted tokens with nonzero\\n        // relays on this chain in this bundle in the order of whitelisting.\\n        address[] l1Tokens;\\n    }\\n\\n    // A data worker can optimistically store several merkle roots on this contract by staking a bond and calling\\n    // proposeRootBundle. By staking a bond, the data worker is alleging that the merkle roots all contain valid leaves\\n    // that can be executed later to:\\n    // - Send funds from this contract to a SpokePool or vice versa\\n    // - Send funds from a SpokePool to Relayer as a refund for a relayed deposit\\n    // - Send funds from a SpokePool to a deposit recipient to fulfill a \\\"slow\\\" relay\\n    // Anyone can dispute this struct if the merkle roots contain invalid leaves before the\\n    // challengePeriodEndTimestamp. Once the expiration timestamp is passed, executeRootBundle to execute a leaf\\n    // from the poolRebalanceRoot on this contract and it will simultaneously publish the relayerRefundRoot and\\n    // slowRelayRoot to a SpokePool. The latter two roots, once published to the SpokePool, contain\\n    // leaves that can be executed on the SpokePool to pay relayers or recipients.\\n    struct RootBundle {\\n        // Contains leaves instructing this contract to send funds to SpokePools.\\n        bytes32 poolRebalanceRoot;\\n        // Relayer refund merkle root to be published to a SpokePool.\\n        bytes32 relayerRefundRoot;\\n        // Slow relay merkle root to be published to a SpokePool.\\n        bytes32 slowRelayRoot;\\n        // This is a 1D bitmap, with max size of 256 elements, limiting us to 256 chainsIds.\\n        uint256 claimedBitMap;\\n        // Proposer of this root bundle.\\n        address proposer;\\n        // Number of pool rebalance leaves to execute in the poolRebalanceRoot. After this number\\n        // of leaves are executed, a new root bundle can be proposed\\n        uint8 unclaimedPoolRebalanceLeafCount;\\n        // When root bundle challenge period passes and this root bundle becomes executable.\\n        uint32 challengePeriodEndTimestamp;\\n    }\\n\\n    // Each whitelisted L1 token has an associated pooledToken struct that contains all information used to track the\\n    // cumulative LP positions and if this token is enabled for deposits.\\n    struct PooledToken {\\n        // LP token given to LPs of a specific L1 token.\\n        address lpToken;\\n        // True if accepting new LP's.\\n        bool isEnabled;\\n        // Timestamp of last LP fee update.\\n        uint32 lastLpFeeUpdate;\\n        // Number of LP funds sent via pool rebalances to SpokePools and are expected to be sent\\n        // back later.\\n        int256 utilizedReserves;\\n        // Number of LP funds held in contract less utilized reserves.\\n        uint256 liquidReserves;\\n        // Number of LP funds reserved to pay out to LPs as fees.\\n        uint256 undistributedLpFees;\\n    }\\n\\n    // Helper contracts to facilitate cross chain actions between HubPool and SpokePool for a specific network.\\n    struct CrossChainContract {\\n        address adapter;\\n        address spokePool;\\n    }\\n\\n    function setPaused(bool pause) external;\\n\\n    function emergencyDeleteProposal() external;\\n\\n    function relaySpokePoolAdminFunction(uint256 chainId, bytes memory functionData) external;\\n\\n    function setProtocolFeeCapture(address newProtocolFeeCaptureAddress, uint256 newProtocolFeeCapturePct) external;\\n\\n    function setBond(IERC20 newBondToken, uint256 newBondAmount) external;\\n\\n    function setLiveness(uint32 newLiveness) external;\\n\\n    function setIdentifier(bytes32 newIdentifier) external;\\n\\n    function setCrossChainContracts(\\n        uint256 l2ChainId,\\n        address adapter,\\n        address spokePool\\n    ) external;\\n\\n    function enableL1TokenForLiquidityProvision(address l1Token) external;\\n\\n    function disableL1TokenForLiquidityProvision(address l1Token) external;\\n\\n    function addLiquidity(address l1Token, uint256 l1TokenAmount) external payable;\\n\\n    function removeLiquidity(\\n        address l1Token,\\n        uint256 lpTokenAmount,\\n        bool sendEth\\n    ) external;\\n\\n    function exchangeRateCurrent(address l1Token) external returns (uint256);\\n\\n    function liquidityUtilizationCurrent(address l1Token) external returns (uint256);\\n\\n    function liquidityUtilizationPostRelay(address l1Token, uint256 relayedAmount) external returns (uint256);\\n\\n    function sync(address l1Token) external;\\n\\n    function proposeRootBundle(\\n        uint256[] memory bundleEvaluationBlockNumbers,\\n        uint8 poolRebalanceLeafCount,\\n        bytes32 poolRebalanceRoot,\\n        bytes32 relayerRefundRoot,\\n        bytes32 slowRelayRoot\\n    ) external;\\n\\n    function executeRootBundle(\\n        uint256 chainId,\\n        uint256 groupIndex,\\n        uint256[] memory bundleLpFees,\\n        int256[] memory netSendAmounts,\\n        int256[] memory runningBalances,\\n        uint8 leafId,\\n        address[] memory l1Tokens,\\n        bytes32[] memory proof\\n    ) external;\\n\\n    function disputeRootBundle() external;\\n\\n    function claimProtocolFeesCaptured(address l1Token) external;\\n\\n    function setPoolRebalanceRoute(\\n        uint256 destinationChainId,\\n        address l1Token,\\n        address destinationToken\\n    ) external;\\n\\n    function setDepositRoute(\\n        uint256 originChainId,\\n        uint256 destinationChainId,\\n        address originToken,\\n        bool depositsEnabled\\n    ) external;\\n\\n    function poolRebalanceRoute(uint256 destinationChainId, address l1Token)\\n        external\\n        view\\n        returns (address destinationToken);\\n\\n    function loadEthForL2Calls() external payable;\\n}\\n\",\"keccak256\":\"0xd8cfdded5db9bf29099e91abd8c8992b4deba1a22d4ffaed94c43ff3d47dcf33\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a03461007057601f61065738819003918201601f19168301916001600160401b038311848410176100745780849260209460405283398101031261007057516001600160a01b0381168103610070576080526040516105ce90816100898239608051818181608c01526101550152f35b5f80fd5b634e487b7160e01b5f52604160045260245ffdfe6080604090808252600480361015610015575f80fd5b60e05f35811c9283631251fa801461035c57508263b6a31578146100b457505063e190440214610043575f80fd5b346100b0575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100b0576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b5f80fd5b8390346100b05760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100b05773ffffffffffffffffffffffffffffffffffffffff90833582811681036100b0576024359267ffffffffffffffff908185116100b057366023860112156100b05784870135958287116100b057602486019560248836920101116100b0576044359283151584036100b0578893837f0000000000000000000000000000000000000000000000000000000000000000169081330361033457156101f35750505050509050600154907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82146101c7576101c59450600182016001556104fd565b005b6011857f4e487b71000000000000000000000000000000000000000000000000000000005f525260245ffd5b828792939495965051958680927f4144fd610000000000000000000000000000000000000000000000000000000082525afa97881561032a575f9861024c575b50505050505063ffffffff60c06101c59401511661044a565b909192939480985085813d8311610323575b610268818361039e565b810103126100b0578251978801918211888310176102f7575081528251865260208301516020870152808301519086015260608201516060860152608082015190811681036100b057608085015260a08101519060ff821682036100b05760c09160a086015201519263ffffffff841684036100b05760c0816101c5958263ffffffff94015294868080610233565b6041907f4e487b71000000000000000000000000000000000000000000000000000000005f525260245ffd5b503d61025e565b82513d5f823e3d90fd5b8584517f339c0f06000000000000000000000000000000000000000000000000000000008152fd5b905083346100b05760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100b057602092355f525f83525f20548152f35b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176103df57604052565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b601f82602094937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe093818652868601375f8582860101520116010190565b9190825f525f602052604090815f20546104f7575f926104f2837f4ba0c1a2e56506b7c710f056ac26e5fdb506e29d3f760fb4b68857f7e7a61d229451602081019087825282808201526104d2816104a660608201888a61040c565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0810183528261039e565b51902087875286602052818720555192839260208452602084019161040c565b0390a3565b50505050565b91929092835f525f602052604091825f2054610591576104f2837f4ba0c1a2e56506b7c710f056ac26e5fdb506e29d3f760fb4b68857f7e7a61d2294519573ffffffffffffffffffffffffffffffffffffffff602088019116968782528280820152610571816104a660608201888a61040c565b519020875f525f602052815f20555192839260208452602084019161040c565b505050505056fea26469706673582212200e81ce368a6037e5ef5c9d0890db03a2ec9bc69afa2003d55de26ebfa2f4574264736f6c63430008170033",
  "deployedBytecode": "0x6080604090808252600480361015610015575f80fd5b60e05f35811c9283631251fa801461035c57508263b6a31578146100b457505063e190440214610043575f80fd5b346100b0575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100b0576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b5f80fd5b8390346100b05760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100b05773ffffffffffffffffffffffffffffffffffffffff90833582811681036100b0576024359267ffffffffffffffff908185116100b057366023860112156100b05784870135958287116100b057602486019560248836920101116100b0576044359283151584036100b0578893837f0000000000000000000000000000000000000000000000000000000000000000169081330361033457156101f35750505050509050600154907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82146101c7576101c59450600182016001556104fd565b005b6011857f4e487b71000000000000000000000000000000000000000000000000000000005f525260245ffd5b828792939495965051958680927f4144fd610000000000000000000000000000000000000000000000000000000082525afa97881561032a575f9861024c575b50505050505063ffffffff60c06101c59401511661044a565b909192939480985085813d8311610323575b610268818361039e565b810103126100b0578251978801918211888310176102f7575081528251865260208301516020870152808301519086015260608201516060860152608082015190811681036100b057608085015260a08101519060ff821682036100b05760c09160a086015201519263ffffffff841684036100b05760c0816101c5958263ffffffff94015294868080610233565b6041907f4e487b71000000000000000000000000000000000000000000000000000000005f525260245ffd5b503d61025e565b82513d5f823e3d90fd5b8584517f339c0f06000000000000000000000000000000000000000000000000000000008152fd5b905083346100b05760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100b057602092355f525f83525f20548152f35b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176103df57604052565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b601f82602094937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe093818652868601375f8582860101520116010190565b9190825f525f602052604090815f20546104f7575f926104f2837f4ba0c1a2e56506b7c710f056ac26e5fdb506e29d3f760fb4b68857f7e7a61d229451602081019087825282808201526104d2816104a660608201888a61040c565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0810183528261039e565b51902087875286602052818720555192839260208452602084019161040c565b0390a3565b50505050565b91929092835f525f602052604091825f2054610591576104f2837f4ba0c1a2e56506b7c710f056ac26e5fdb506e29d3f760fb4b68857f7e7a61d2294519573ffffffffffffffffffffffffffffffffffffffff602088019116968782528280820152610571816104a660608201888a61040c565b519020875f525f602052815f20555192839260208452602084019161040c565b505050505056fea26469706673582212200e81ce368a6037e5ef5c9d0890db03a2ec9bc69afa2003d55de26ebfa2f4574264736f6c63430008170033",
  "devdoc": {
    "custom:security-contact": "bugs@across.to",
    "details": "Designed to be used with Universal_Adapter and Universal_SpokePool.This contract DOES NOT prevent replay attacks of storage proofs on the L2 spoke pool if the UniversalStorageProof_Adapters using this contract are mapped to spokepools with the same address on different L2 chains. See comment in storeRelayAdminFunctionCalldata() for more details.",
    "kind": "dev",
    "methods": {
      "storeRelayMessageCalldata(address,bytes,bool)": {
        "details": "Only callable by the HubPool contract.",
        "params": {
          "data": "Data to send to Universal SpokePool.",
          "isAdminSender": "True if the data is an admin function call, false otherwise.",
          "target": "Address of the contract on the destination that will receive the message. Unused if the data is NOT an admin function and can be relayed to any target."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "StoredCallData(address,bytes,uint256)": {
        "notice": "Event designed to be queried off chain and relayed to Universal SpokePool."
      }
    },
    "kind": "user",
    "methods": {
      "hubPool()": {
        "notice": "Address of the HubPool contract, the only contract that can store data to this contract."
      },
      "relayMessageCallData(uint256)": {
        "notice": "Maps nonce to hash of calldata."
      },
      "storeRelayMessageCalldata(address,bytes,bool)": {
        "notice": "To be called by HubPool to store calldata that will be relayed to the Universal_SpokePool via storage proofs."
      }
    },
    "notice": "Stores data that can be relayed to L2 SpokePool using storage proof verification and light client contracts on the L2 where the SpokePool is deployed. Only the HubPool can store data to this contract. Each data to be relayed is written to a unique slot key and that slot key's value can never be modified.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 30584,
        "contract": "contracts/chain-adapters/utilities/HubPoolStore.sol:HubPoolStore",
        "label": "relayMessageCallData",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 30587,
        "contract": "contracts/chain-adapters/utilities/HubPoolStore.sol:HubPoolStore",
        "label": "dataUuid",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
