{
  "address": "0x7Ea0D1882D610095A45E512B0113f79cA98a8EfE",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract WETH9Interface",
          "name": "_l1Weth",
          "type": "address"
        },
        {
          "internalType": "contract IMessageService",
          "name": "_l1MessageService",
          "type": "address"
        },
        {
          "internalType": "contract ITokenBridge",
          "name": "_l1TokenBridge",
          "type": "address"
        },
        {
          "internalType": "contract IUSDCBridge",
          "name": "_l1UsdcBridge",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "message",
          "type": "bytes"
        }
      ],
      "name": "MessageRelayed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "l1Token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "l2Token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "TokensRelayed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "L1_MESSAGE_SERVICE",
      "outputs": [
        {
          "internalType": "contract IMessageService",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "L1_TOKEN_BRIDGE",
      "outputs": [
        {
          "internalType": "contract ITokenBridge",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "L1_USDC_BRIDGE",
      "outputs": [
        {
          "internalType": "contract IUSDCBridge",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "L1_WETH",
      "outputs": [
        {
          "internalType": "contract WETH9Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "message",
          "type": "bytes"
        }
      ],
      "name": "relayMessage",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "l1Token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "l2Token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "relayTokens",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x88c982d389c5d52468df29547c9f03ca8d9e917b80dc6c95e878d1c04d648a9f",
  "receipt": {
    "to": null,
    "from": "0x9A8f92a830A5cB89a3816e3D267CB7791c16b04D",
    "contractAddress": "0x7Ea0D1882D610095A45E512B0113f79cA98a8EfE",
    "transactionIndex": 39,
    "gasUsed": "702441",
    "logsBloom": "0x
    "blockHash": "0x0dbbaba91a7193916fd9baeece9e08c140f249a580246f76502407f5d8564311",
    "transactionHash": "0x88c982d389c5d52468df29547c9f03ca8d9e917b80dc6c95e878d1c04d648a9f",
    "logs": [],
    "blockNumber": 19402413,
    "cumulativeGasUsed": "3282195",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2",
    "0xd19d4B5d358258f05D7B411E21A1460D11B0876F",
    "0x051F1D88f0aF5763fB888eC4378b4D8B29ea3319",
    "0x504a330327a089d8364c4ab3811ee26976d388ce"
  ],
  "numDeployments": 1,
  "solcInputHash": "efbfe1afbd4d58558333413597acfbd6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract WETH9Interface\",\"name\":\"_l1Weth\",\"type\":\"address\"},{\"internalType\":\"contract IMessageService\",\"name\":\"_l1MessageService\",\"type\":\"address\"},{\"internalType\":\"contract ITokenBridge\",\"name\":\"_l1TokenBridge\",\"type\":\"address\"},{\"internalType\":\"contract IUSDCBridge\",\"name\":\"_l1UsdcBridge\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"MessageRelayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"l1Token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"l2Token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"TokensRelayed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"L1_MESSAGE_SERVICE\",\"outputs\":[{\"internalType\":\"contract IMessageService\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"L1_TOKEN_BRIDGE\",\"outputs\":[{\"internalType\":\"contract ITokenBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"L1_USDC_BRIDGE\",\"outputs\":[{\"internalType\":\"contract IUSDCBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"L1_WETH\",\"outputs\":[{\"internalType\":\"contract WETH9Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"relayMessage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"l1Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"l2Token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"relayTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_l1MessageService\":\"Canonical message service contract on L1.\",\"_l1TokenBridge\":\"Canonical token bridge contract on L1.\",\"_l1UsdcBridge\":\"L1 USDC Bridge to ConsenSys's L2 Linea.\",\"_l1Weth\":\"WETH address on L1.\"}},\"relayMessage(address,bytes)\":{\"params\":{\"message\":\"Data to send to target.\",\"target\":\"Contract on Linea that will receive message.\"}},\"relayTokens(address,address,uint256,address)\":{\"params\":{\"amount\":\"Amount of L1 tokens to deposit and L2 tokens to receive.\",\"l1Token\":\"L1 token to deposit.\",\"l2Token\":\"L2 token to receive.\",\"to\":\"Bridge recipient.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Constructs new Adapter.\"},\"relayMessage(address,bytes)\":{\"notice\":\"Send cross-chain message to target on Linea.\"},\"relayTokens(address,address,uint256,address)\":{\"notice\":\"Bridge tokens to Linea.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/chain-adapters/Linea_Adapter.sol\":\"Linea_Adapter\"},\"debug\":{\"revertStrings\":\"strip\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb264c03a3442eb37a68ad620cefd1182766b58bee6cec40343480392d6b14d69\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"contracts/chain-adapters/Linea_Adapter.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/AdapterInterface.sol\\\";\\nimport \\\"../external/interfaces/WETH9Interface.sol\\\";\\n\\nimport { IMessageService, ITokenBridge, IUSDCBridge } from \\\"../external/interfaces/LineaInterfaces.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n// solhint-disable-next-line contract-name-camelcase\\ncontract Linea_Adapter is AdapterInterface {\\n    using SafeERC20 for IERC20;\\n\\n    WETH9Interface public immutable L1_WETH;\\n    IMessageService public immutable L1_MESSAGE_SERVICE;\\n    ITokenBridge public immutable L1_TOKEN_BRIDGE;\\n    IUSDCBridge public immutable L1_USDC_BRIDGE;\\n\\n    /**\\n     * @notice Constructs new Adapter.\\n     * @param _l1Weth WETH address on L1.\\n     * @param _l1MessageService Canonical message service contract on L1.\\n     * @param _l1TokenBridge Canonical token bridge contract on L1.\\n     * @param _l1UsdcBridge L1 USDC Bridge to ConsenSys's L2 Linea.\\n     */\\n    constructor(\\n        WETH9Interface _l1Weth,\\n        IMessageService _l1MessageService,\\n        ITokenBridge _l1TokenBridge,\\n        IUSDCBridge _l1UsdcBridge\\n    ) {\\n        L1_WETH = _l1Weth;\\n        L1_MESSAGE_SERVICE = _l1MessageService;\\n        L1_TOKEN_BRIDGE = _l1TokenBridge;\\n        L1_USDC_BRIDGE = _l1UsdcBridge;\\n    }\\n\\n    /**\\n     * @notice Send cross-chain message to target on Linea.\\n     * @param target Contract on Linea that will receive message.\\n     * @param message Data to send to target.\\n     */\\n    function relayMessage(address target, bytes calldata message) external payable override {\\n        // Linea currently does not support auto-claiming of cross-chain messages that have\\n        // non-empty calldata. As we need to manually claim these messages, we can set the\\n        // message fees to 0.\\n        L1_MESSAGE_SERVICE.sendMessage(target, 0, message);\\n        emit MessageRelayed(target, message);\\n    }\\n\\n    /**\\n     * @notice Bridge tokens to Linea.\\n     * @param l1Token L1 token to deposit.\\n     * @param l2Token L2 token to receive.\\n     * @param amount Amount of L1 tokens to deposit and L2 tokens to receive.\\n     * @param to Bridge recipient.\\n     */\\n    function relayTokens(\\n        address l1Token,\\n        address l2Token,\\n        uint256 amount,\\n        address to\\n    ) external payable override {\\n        // If the l1Token is WETH then unwrap it to ETH then send the ETH directly\\n        // via the Canoncial Message Service.\\n        if (l1Token == address(L1_WETH)) {\\n            L1_WETH.withdraw(amount);\\n            L1_MESSAGE_SERVICE.sendMessage{ value: amount }(to, 0, \\\"\\\");\\n        }\\n        // If the l1Token is USDC, then we need sent it via the USDC Bridge.\\n        else if (l1Token == L1_USDC_BRIDGE.usdc()) {\\n            IERC20(l1Token).safeIncreaseAllowance(address(L1_USDC_BRIDGE), amount);\\n            L1_USDC_BRIDGE.depositTo(amount, to);\\n        }\\n        // For other tokens, we can use the Canonical Token Bridge.\\n        else {\\n            IERC20(l1Token).safeIncreaseAllowance(address(L1_TOKEN_BRIDGE), amount);\\n            L1_TOKEN_BRIDGE.bridgeToken(l1Token, amount, to);\\n        }\\n\\n        emit TokensRelayed(l1Token, l2Token, amount, to);\\n    }\\n}\\n\",\"keccak256\":\"0x187cc12f7ad9ec9bca6f1e0b4984c9a72c6d6886a00ba73a5a1c87930859e6b7\",\"license\":\"BUSL-1.1\"},\"contracts/chain-adapters/interfaces/AdapterInterface.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n/**\\n * @notice Sends cross chain messages and tokens to contracts on a specific L2 network.\\n * This interface is implemented by an adapter contract that is deployed on L1.\\n */\\n\\ninterface AdapterInterface {\\n    event MessageRelayed(address target, bytes message);\\n\\n    event TokensRelayed(address l1Token, address l2Token, uint256 amount, address to);\\n\\n    /**\\n     * @notice Send message to `target` on L2.\\n     * @dev This method is marked payable because relaying the message might require a fee\\n     * to be paid by the sender to forward the message to L2. However, it will not send msg.value\\n     * to the target contract on L2.\\n     * @param target L2 address to send message to.\\n     * @param message Message to send to `target`.\\n     */\\n    function relayMessage(address target, bytes calldata message) external payable;\\n\\n    /**\\n     * @notice Send `amount` of `l1Token` to `to` on L2. `l2Token` is the L2 address equivalent of `l1Token`.\\n     * @dev This method is marked payable because relaying the message might require a fee\\n     * to be paid by the sender to forward the message to L2. However, it will not send msg.value\\n     * to the target contract on L2.\\n     * @param l1Token L1 token to bridge.\\n     * @param l2Token L2 token to receive.\\n     * @param amount Amount of `l1Token` to bridge.\\n     * @param to Bridge recipient.\\n     */\\n    function relayTokens(\\n        address l1Token,\\n        address l2Token,\\n        uint256 amount,\\n        address to\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x1d52fcb8b10dc7f260345918c1a90d496a4c9f774402cbd5ebde881b8fed6d50\",\"license\":\"BUSL-1.1\"},\"contracts/external/interfaces/LineaInterfaces.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n/**\\n * @notice Interface of Linea's Canonical Message Service\\n * See https://github.com/Consensys/linea-contracts/blob/3cf85529fd4539eb06ba998030c37e47f98c528a/contracts/interfaces/IMessageService.sol\\n */\\ninterface IMessageService {\\n    /**\\n     * @notice Sends a message for transporting from the given chain.\\n     * @dev This function should be called with a msg.value = _value + _fee. The fee will be paid on the destination chain.\\n     * @param _to The destination address on the destination chain.\\n     * @param _fee The message service fee on the origin chain.\\n     * @param _calldata The calldata used by the destination message service to call the destination contract.\\n     */\\n    function sendMessage(\\n        address _to,\\n        uint256 _fee,\\n        bytes calldata _calldata\\n    ) external payable;\\n\\n    /**\\n     * @notice Returns the original sender of the message on the origin layer.\\n     */\\n    function sender() external view returns (address);\\n\\n    /**\\n     * @notice Minimum fee to use when sending a message. Currently, only exists on L2MessageService.\\n     * See https://github.com/Consensys/linea-contracts/blob/3cf85529fd4539eb06ba998030c37e47f98c528a/contracts/messageService/l2/L2MessageService.sol#L37\\n     */\\n    function minimumFeeInWei() external view returns (uint256);\\n}\\n\\n/**\\n * @notice Interface of Linea's Canonical Token Bridge\\n * See https://github.com/Consensys/linea-contracts/blob/3cf85529fd4539eb06ba998030c37e47f98c528a/contracts/tokenBridge/interfaces/ITokenBridge.sol\\n */\\ninterface ITokenBridge {\\n    /**\\n     * @notice This function is the single entry point to bridge tokens to the\\n     *   other chain, both for native and already bridged tokens. You can use it\\n     *   to bridge any ERC20. If the token is bridged for the first time an ERC20\\n     *   (BridgedToken.sol) will be automatically deployed on the target chain.\\n     * @dev User should first allow the bridge to transfer tokens on his behalf.\\n     *   Alternatively, you can use `bridgeTokenWithPermit` to do so in a single\\n     *   transaction. If you want the transfer to be automatically executed on the\\n     *   destination chain. You should send enough ETH to pay the postman fees.\\n     *   Note that Linea can reserve some tokens (which use a dedicated bridge).\\n     *   In this case, the token cannot be bridged. Linea can only reserve tokens\\n     *   that have not been bridged yet.\\n     *   Linea can pause the bridge for security reason. In this case new bridge\\n     *   transaction would revert.\\n     * @param _token The address of the token to be bridged.\\n     * @param _amount The amount of the token to be bridged.\\n     * @param _recipient The address that will receive the tokens on the other chain.\\n     */\\n    function bridgeToken(\\n        address _token,\\n        uint256 _amount,\\n        address _recipient\\n    ) external payable;\\n}\\n\\ninterface IUSDCBridge {\\n    function usdc() external view returns (address);\\n\\n    /**\\n     * @dev Sends the sender's USDC from L1 to the recipient on L2, locks the USDC sent\\n     * in this contract and sends a message to the message bridge\\n     * contract to mint the equivalent USDC on L2\\n     * @param amount The amount of USDC to send\\n     * @param to The recipient's address to receive the funds\\n     */\\n    function depositTo(uint256 amount, address to) external payable;\\n}\\n\",\"keccak256\":\"0x127f3fb8fb7e09fb20d0969f52f774a449ccafae72ece539a8b56b36e9b55e63\",\"license\":\"BUSL-1.1\"},\"contracts/external/interfaces/WETH9Interface.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n/**\\n * @notice Interface for the WETH9 contract.\\n */\\ninterface WETH9Interface {\\n    /**\\n     * @notice Burn Wrapped Ether and receive native Ether.\\n     * @param wad Amount of WETH to unwrap and send to caller.\\n     */\\n    function withdraw(uint256 wad) external;\\n\\n    /**\\n     * @notice Lock native Ether and mint Wrapped Ether ERC20\\n     * @dev msg.value is amount of Wrapped Ether to mint/Ether to lock.\\n     */\\n    function deposit() external payable;\\n\\n    /**\\n     * @notice Get balance of WETH held by `guy`.\\n     * @param guy Address to get balance of.\\n     * @return wad Amount of WETH held by `guy`.\\n     */\\n    function balanceOf(address guy) external view returns (uint256 wad);\\n\\n    /**\\n     * @notice Transfer `wad` of WETH from caller to `guy`.\\n     * @param guy Address to send WETH to.\\n     * @param wad Amount of WETH to send.\\n     * @return ok True if transfer succeeded.\\n     */\\n    function transfer(address guy, uint256 wad) external returns (bool);\\n}\\n\",\"keccak256\":\"0x3f7892554ec7f54681fdd3cc18a41346c246c9c1afba016c52990ef77741f718\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x610100346100e057601f610cbd38819003918201601f19168301916001600160401b038311848410176100e4578084926080946040528339810103126100e05780516001600160a01b03919082811681036100e05760208201519083821682036100e05760408301519284841684036100e0576060015193841684036100e05760805260a05260c05260e052604051610bc490816100f98239608051818181610332015261075a015260a05181818160eb0152818161029c01526103a8015260c0518181816105cb01526107c6015260e05181818161022d01526104d40152f35b5f80fd5b634e487b7160e01b5f52604160045260245ffdfe6080604081815260049081361015610015575f80fd5b5f925f3560e01c9081630cbae5201461077e575080631efd482a1461071057806352c8c75c146102c057806369bd096e14610251578063deefd936146101e25763e6eb8ade14610063575f80fd5b807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101de576100946107ea565b91602435928467ffffffffffffffff918286116101da57366023870112156101da57858401359283116101da57602486019560248436920101116101da5773ffffffffffffffffffffffffffffffffffffffff90817f00000000000000000000000000000000000000000000000000000000000000001690813b156101d657839187519384927f9f3ce55a000000000000000000000000000000000000000000000000000000008452168097830152826024830152606060448301528183816101628c8a606484019161088f565b03925af180156101cc576101b4575b50507f9e6c52944e331ba6270e7fe4cea2a4086bae8f7a27e1cdba07f416806f5d0ac4936101ae918451948594855280602086015284019161088f565b0390a180f35b6101bd9061080d565b6101c857845f610171565b8480fd5b85513d84823e3d90fd5b8380fd5b5080fd5b8280fd5b8382346101da57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101da576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b8382346101da57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101da576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b509060807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126106c2576102f46107ea565b9060243573ffffffffffffffffffffffffffffffffffffffff908181168091036106c25760443591606435938185168095036106c2579481169487917f000000000000000000000000000000000000000000000000000000000000000081168781036104ac57803b156101d65783809160248b51809481937f2e1a7d4d0000000000000000000000000000000000000000000000000000000083528b898401525af19081156104a257849161048e575b50507f00000000000000000000000000000000000000000000000000000000000000001690813b156101de578560848492878b5195869485937f9f3ce55a000000000000000000000000000000000000000000000000000000008552840152856024840152606060448401528560648401525af1801561048457610464575b5050907fd7e09655439c3932e55857df3220186e5a7f0980825f20691c2b35d941dee75b9460809493925b815194855260208501528301526060820152a180f35b61047290959493929561080d565b61048057909192855f610423565b8580fd5b87513d84823e3d90fd5b6104979061080d565b6101de57825f6103a4565b89513d86823e3d90fd5b5087517f3e413bee0000000000000000000000000000000000000000000000000000000081527f0000000000000000000000000000000000000000000000000000000000000000821693506020818481875afa90811561070657908a949392915f916106c6575b50811688036105c057506105288583896108cd565b813b156101de578460448492838b5195869485937f70aff70f0000000000000000000000000000000000000000000000000000000085528401528a60248401525af18015610484576105a4575b5050907fd7e09655439c3932e55857df3220186e5a7f0980825f20691c2b35d941dee75b94608094939261044e565b6105b290959493929561080d565b61048057909192855f610575565b9150915095929394957f000000000000000000000000000000000000000000000000000000000000000016906105f78583896108cd565b813b156106c2578660645f9283875195869485937f522ea81a0000000000000000000000000000000000000000000000000000000085528401528960248401528a60448401525af180156106b857610678575b5091608093917fd7e09655439c3932e55857df3220186e5a7f0980825f20691c2b35d941dee75b959361044e565b7fd7e09655439c3932e55857df3220186e5a7f0980825f20691c2b35d941dee75b9593919650916106ab6080959361080d565b5f9691939550919361064a565b83513d5f823e3d90fd5b5f80fd5b919450506020813d6020116106fe575b816106e36020938361084e565b810103126106c257519280841684036106c257899381610513565b3d91506106d6565b89513d5f823e3d90fd5b50346106c2575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126106c2576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b346106c2575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126106c25760209073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b6004359073ffffffffffffffffffffffffffffffffffffffff821682036106c257565b67ffffffffffffffff811161082157604052565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761082157604052565b601f82602094937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe093818652868601375f8582860101520116010190565b9291909273ffffffffffffffffffffffffffffffffffffffff809116604051917fdd62ed3e000000000000000000000000000000000000000000000000000000008352306004840152602495169182868201526020938482604481865afa918215610b5a575f92610b2b575b508101809111610aff5760405190848201937f095ea7b3000000000000000000000000000000000000000000000000000000008552878301526044820152604481526080810167ffffffffffffffff9382821085831117610ad35760c083019282841086851117610aa757865f94938594604052527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656460a0820152519082855af1903d15610a96573d928311610a6a57610a329394955060405192610a25867fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116018561084e565b83523d5f8685013e610b65565b8051918215918215610a4a575b50509050156106c257565b8092508193810103126106c257015180151581036106c257805f80610a3f565b857f4e487b71000000000000000000000000000000000000000000000000000000005f5260416004525ffd5b9150610a3292939450606091610b65565b887f4e487b71000000000000000000000000000000000000000000000000000000005f5260416004525ffd5b877f4e487b71000000000000000000000000000000000000000000000000000000005f5260416004525ffd5b857f4e487b71000000000000000000000000000000000000000000000000000000005f5260116004525ffd5b9091508481813d8311610b53575b610b43818361084e565b810103126106c25751905f610939565b503d610b39565b6040513d5f823e3d90fd5b9015610b7f57815115610b76575090565b3b156106c25790565b5080519081156106c257602001fdfea2646970667358221220c252c357d113e917e1da1072c74844b8e790474e10a678f7edf0218a5092f9ce64736f6c63430008170033",
  "deployedBytecode": "0x6080604081815260049081361015610015575f80fd5b5f925f3560e01c9081630cbae5201461077e575080631efd482a1461071057806352c8c75c146102c057806369bd096e14610251578063deefd936146101e25763e6eb8ade14610063575f80fd5b807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101de576100946107ea565b91602435928467ffffffffffffffff918286116101da57366023870112156101da57858401359283116101da57602486019560248436920101116101da5773ffffffffffffffffffffffffffffffffffffffff90817f00000000000000000000000000000000000000000000000000000000000000001690813b156101d657839187519384927f9f3ce55a000000000000000000000000000000000000000000000000000000008452168097830152826024830152606060448301528183816101628c8a606484019161088f565b03925af180156101cc576101b4575b50507f9e6c52944e331ba6270e7fe4cea2a4086bae8f7a27e1cdba07f416806f5d0ac4936101ae918451948594855280602086015284019161088f565b0390a180f35b6101bd9061080d565b6101c857845f610171565b8480fd5b85513d84823e3d90fd5b8380fd5b5080fd5b8280fd5b8382346101da57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101da576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b8382346101da57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101da576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b509060807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126106c2576102f46107ea565b9060243573ffffffffffffffffffffffffffffffffffffffff908181168091036106c25760443591606435938185168095036106c2579481169487917f000000000000000000000000000000000000000000000000000000000000000081168781036104ac57803b156101d65783809160248b51809481937f2e1a7d4d0000000000000000000000000000000000000000000000000000000083528b898401525af19081156104a257849161048e575b50507f00000000000000000000000000000000000000000000000000000000000000001690813b156101de578560848492878b5195869485937f9f3ce55a000000000000000000000000000000000000000000000000000000008552840152856024840152606060448401528560648401525af1801561048457610464575b5050907fd7e09655439c3932e55857df3220186e5a7f0980825f20691c2b35d941dee75b9460809493925b815194855260208501528301526060820152a180f35b61047290959493929561080d565b61048057909192855f610423565b8580fd5b87513d84823e3d90fd5b6104979061080d565b6101de57825f6103a4565b89513d86823e3d90fd5b5087517f3e413bee0000000000000000000000000000000000000000000000000000000081527f0000000000000000000000000000000000000000000000000000000000000000821693506020818481875afa90811561070657908a949392915f916106c6575b50811688036105c057506105288583896108cd565b813b156101de578460448492838b5195869485937f70aff70f0000000000000000000000000000000000000000000000000000000085528401528a60248401525af18015610484576105a4575b5050907fd7e09655439c3932e55857df3220186e5a7f0980825f20691c2b35d941dee75b94608094939261044e565b6105b290959493929561080d565b61048057909192855f610575565b9150915095929394957f000000000000000000000000000000000000000000000000000000000000000016906105f78583896108cd565b813b156106c2578660645f9283875195869485937f522ea81a0000000000000000000000000000000000000000000000000000000085528401528960248401528a60448401525af180156106b857610678575b5091608093917fd7e09655439c3932e55857df3220186e5a7f0980825f20691c2b35d941dee75b959361044e565b7fd7e09655439c3932e55857df3220186e5a7f0980825f20691c2b35d941dee75b9593919650916106ab6080959361080d565b5f9691939550919361064a565b83513d5f823e3d90fd5b5f80fd5b919450506020813d6020116106fe575b816106e36020938361084e565b810103126106c257519280841684036106c257899381610513565b3d91506106d6565b89513d5f823e3d90fd5b50346106c2575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126106c2576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b346106c2575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126106c25760209073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b6004359073ffffffffffffffffffffffffffffffffffffffff821682036106c257565b67ffffffffffffffff811161082157604052565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761082157604052565b601f82602094937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe093818652868601375f8582860101520116010190565b9291909273ffffffffffffffffffffffffffffffffffffffff809116604051917fdd62ed3e000000000000000000000000000000000000000000000000000000008352306004840152602495169182868201526020938482604481865afa918215610b5a575f92610b2b575b508101809111610aff5760405190848201937f095ea7b3000000000000000000000000000000000000000000000000000000008552878301526044820152604481526080810167ffffffffffffffff9382821085831117610ad35760c083019282841086851117610aa757865f94938594604052527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656460a0820152519082855af1903d15610a96573d928311610a6a57610a329394955060405192610a25867fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116018561084e565b83523d5f8685013e610b65565b8051918215918215610a4a575b50509050156106c257565b8092508193810103126106c257015180151581036106c257805f80610a3f565b857f4e487b71000000000000000000000000000000000000000000000000000000005f5260416004525ffd5b9150610a3292939450606091610b65565b887f4e487b71000000000000000000000000000000000000000000000000000000005f5260416004525ffd5b877f4e487b71000000000000000000000000000000000000000000000000000000005f5260416004525ffd5b857f4e487b71000000000000000000000000000000000000000000000000000000005f5260116004525ffd5b9091508481813d8311610b53575b610b43818361084e565b810103126106c25751905f610939565b503d610b39565b6040513d5f823e3d90fd5b9015610b7f57815115610b76575090565b3b156106c25790565b5080519081156106c257602001fdfea2646970667358221220c252c357d113e917e1da1072c74844b8e790474e10a678f7edf0218a5092f9ce64736f6c63430008170033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_l1MessageService": "Canonical message service contract on L1.",
          "_l1TokenBridge": "Canonical token bridge contract on L1.",
          "_l1UsdcBridge": "L1 USDC Bridge to ConsenSys's L2 Linea.",
          "_l1Weth": "WETH address on L1."
        }
      },
      "relayMessage(address,bytes)": {
        "params": {
          "message": "Data to send to target.",
          "target": "Contract on Linea that will receive message."
        }
      },
      "relayTokens(address,address,uint256,address)": {
        "params": {
          "amount": "Amount of L1 tokens to deposit and L2 tokens to receive.",
          "l1Token": "L1 token to deposit.",
          "l2Token": "L2 token to receive.",
          "to": "Bridge recipient."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Constructs new Adapter."
      },
      "relayMessage(address,bytes)": {
        "notice": "Send cross-chain message to target on Linea."
      },
      "relayTokens(address,address,uint256,address)": {
        "notice": "Bridge tokens to Linea."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
